package DSFE_TP3
package Components
  model Motor_Exc_Indep
      parameter Real[:] currTable = {0, 1.5, 3, 4.5, 6, 7.5, 9, 10.5, 12, 13.5, 15};
      parameter Real[:] fluxTable = {0, 100, 200, 300, 370, 440, 470, 510, 530, 535, 540};
      DSFLib.Mechanical.Rotational.Interfaces.Flange flange annotation(
        Placement(visible = true, transformation(origin = {100, 2}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {104, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      DSFLib.Circuits.Interfaces.Pin p annotation(
        Placement(visible = true, transformation(origin = {-100, 78}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {68, 102}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      DSFLib.Circuits.Interfaces.Pin n annotation(
        Placement(visible = true, transformation(origin = {-100, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-52, 102}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      DSFLib.Mechanical.Rotational.Components.Inertia inertia(J = 15) annotation(
        Placement(transformation(origin = {56, -20}, extent = {{-12, -12}, {12, 12}})));
      DSFLib.Circuits.Components.Resistor Re(R = 25.2) annotation(
        Placement(visible = true, transformation(origin = {-42, 40}, extent = {{-12, -12}, {12, 12}}, rotation = 0)));
      DSFLib.Circuits.Components.Inductor La(L = 0.003) annotation(
        Placement(visible = true, transformation(origin = {-2, 78}, extent = {{-12, -12}, {12, 12}}, rotation = 0)));
      DSFLib.Circuits.Components.Resistor Ra(R = 0.05) annotation(
        Placement(visible = true, transformation(origin = {-42, 78}, extent = {{-12, -12}, {12, 12}}, rotation = 0)));
      DSFLib.Mechanical.Rotational.Components.Damper damper(b = 1.1) annotation(
        Placement(transformation(origin = {44, -62}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      DSFLib.Mechanical.Rotational.Components.Fixed fixed annotation(
        Placement(transformation(origin = {44, -86}, extent = {{-10, -10}, {10, 10}})));
      DSFLib.MultiDomain.ElectroMechanical.Components.SepExcDCM sepExcDCM(K = 0.016, currTable = currTable, fluxTable = fluxTable, phi0 = 0) annotation(
        Placement(transformation(origin = {-6, 2}, extent = {{-16, -16}, {16, 16}})));
      DSFLib.Circuits.Components.Ground ground annotation(
        Placement(visible = true, transformation(origin = {-20, -90}, extent = {{-12, -12}, {12, 12}}, rotation = 0)));
      DSFLib.Circuits.Components.Ground ground1 annotation(
        Placement(visible = true, transformation(origin = {-42, -50}, extent = {{-12, -12}, {12, 12}}, rotation = 0)));
      DSFLib.Circuits.Components.ConstVolt Ve(V = 184) annotation(
        Placement(transformation(origin = {-70, -2}, extent = {{10, -10}, {-10, 10}}, rotation = 90)));
    equation
      connect(damper.flange_a, inertia.flange) annotation(
        Line(points = {{44, -52}, {44, -20}}));
      connect(Ra.n, La.p) annotation(
        Line(points = {{-30, 78}, {-14, 78}}));
      connect(La.n, sepExcDCM.p) annotation(
        Line(points = {{10, 78}, {10, 18}}));
      connect(inertia.flange, sepExcDCM.flange) annotation(
        Line(points = {{44, -20}, {31, -20}, {31, 2}}));
      connect(damper.flange_b, fixed.flange) annotation(
        Line(points = {{43.9, -71.9}, {43.9, -85.9}}));
      connect(Ra.p, p) annotation(
        Line(points = {{-54, 78}, {-100, 78}}));
      connect(sepExcDCM.n, ground.p) annotation(
        Line(points = {{10, -14}, {10, -80}, {-20, -80}}));
      connect(ground.p, n) annotation(
        Line(points = {{-20, -80}, {-100, -80}}));
      connect(sepExcDCM.flange, flange) annotation(
        Line(points = {{31, 2}, {100, 2}}));
      connect(Re.n, sepExcDCM.p_ex) annotation(
        Line(points = {{-30, 40}, {-22, 40}, {-22, 18}}));
      connect(sepExcDCM.n_ex, ground1.p) annotation(
        Line(points = {{-22, -14}, {-22, -40}, {-42, -40}}));
      connect(Re.p, Ve.p) annotation(
        Line(points = {{-54, 40}, {-70, 40}, {-70, 8}}));
      connect(Ve.n, ground1.p) annotation(
        Line(points = {{-70, -12}, {-70, -40}, {-42, -40}}));
      annotation(
        Icon(graphics = {Bitmap(origin = {9, -5}, extent = {{89, -89}, {-89, 89}}, imageSource = ""), Line(origin = {-24.8409, 78.983}, points = {{-28, 22}, {-28, -8}, {28, -8}, {28, -22}, {28, -22}}), Line(origin = {41.1591, 77.983}, points = {{26, 21}, {26, -7}, {-26, -7}, {-26, -21}, {-26, -21}})}, coordinateSystem(extent = {{-100, -100}, {100, 100}})));
    end Motor_Exc_Indep;

  model Ramp
    extends DSFLib.Circuits.Interfaces.OnePort;
    parameter Real Vf(unit = "V") = 1, t0(unit = "s"), tf(unit = "s");
  equation
    v = if time < t0 then 0 elseif time >= t0 and time < tf then ((time - t0)/(tf - t0))*Vf else Vf;
    annotation(
      Icon(graphics = {Rectangle(lineThickness = 1, extent = {{-40, 40}, {40, -40}}), Line(origin = {1.21, 1.21}, points = {{-21.2071, -21.2071}, {-13.2071, -21.2071}, {10.7929, 18.7929}, {18.7929, 18.7929}, {18.7929, 18.7929}}, thickness = 0.5), Line(origin = {-70, 0}, points = {{-30, 0}, {30, 0}, {30, 0}, {30, 0}}), Line(origin = {68, 0}, points = {{-28, 0}, {18, 0}, {28, 0}})}));
  end Ramp;

  model Bridge_Crane
    DSFLib.Mechanical.Planar.Components.Revolute revolute annotation(
      Placement(visible = true, transformation(origin = {26, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    DSFLib.Mechanical.Planar.Components.RigidBar rigidBar(phi.start = 4.71238898038, L = 10) annotation(
      Placement(transformation(origin = {78, -6}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
    DSFLib.Mechanical.Planar.Components.Prismatic prismatic annotation(
      Placement(transformation(origin = {-26, 12}, extent = {{-10, -10}, {10, 10}})));
    DSFLib.Mechanical.Planar.Components.pointMass Carro(m = 1000) annotation(
      Placement(visible = true, transformation(origin = {0, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    DSFLib.Mechanical.Translational.Components.Damper damper(b = 10e6) annotation(
      Placement(visible = true, transformation(origin = {-26, -12}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
    DSFLib.Mechanical.Planar.Components.Fixed fixed annotation(
      Placement(visible = true, transformation(origin = {-58, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    DSFLib.Mechanical.Translational.Interfaces.Flange flange annotation(
      Placement(transformation(origin = {-7, -31}, extent = {{-5, -5}, {5, 5}}), iconTransformation(origin = {-24, 26}, extent = {{-10, -10}, {10, 10}})));
    pointMassFric mass(m = 4000, b = 100) annotation(
      Placement(transformation(origin = {78, -28}, extent = {{-10, -10}, {10, 10}})));
DSFLib.Mechanical.Planar.Interfaces.Frame frame annotation(
      Placement(transformation(origin = {77, -45}, extent = {{-5, -5}, {5, 5}}), iconTransformation(origin = {0, -72}, extent = {{-4, -4}, {4, 4}}, rotation = -90)));
  equation
    connect(fixed.frame, prismatic.frame_a) annotation(
      Line(points = {{-47.6, 12}, {-36, 12}}));
    connect(prismatic.support, damper.flange_a) annotation(
      Line(points = {{-32, 6}, {-32, -0.2}, {-40.4, -0.2}, {-40.4, -12.2}, {-34.4, -12.2}}));
    connect(prismatic.flange_a, damper.flange_b) annotation(
      Line(points = {{-20, 6}, {-20, -0.2}, {-11.6, -0.2}, {-11.6, -12.2}, {-17.6, -12.2}}));
    connect(revolute.frame_b, rigidBar.frame_a) annotation(
      Line(points = {{36, 12}, {78, 12}, {78, 4}}));
    connect(Carro.frame, revolute.frame_a) annotation(
      Line(points = {{0, 12}, {16, 12}}));
    connect(prismatic.frame_b, Carro.frame) annotation(
      Line(points = {{-16, 12}, {0, 12}}));
    connect(damper.flange_b, flange) annotation(
      Line(points = {{-18, -12}, {-18, -30}, {-6, -30}}));
    connect(mass.frame, rigidBar.frame_b) annotation(
      Line(points = {{78, -28}, {78, -16}}));
connect(mass.frame, frame) annotation(
      Line(points = {{78, -28}, {78, -44}}));
    annotation(
      Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}})),
      experiment(StartTime = 0, StopTime = 10, Tolerance = 1e-06, Interval = 0.02),
      Icon(graphics = {Rectangle(origin = {2, 26}, fillColor = {0, 111, 0}, fillPattern = FillPattern.Solid, extent = {{-26, 22}, {26, -22}}), Ellipse(origin = {1, -59}, fillColor = {147, 147, 147}, fillPattern = FillPattern.Sphere, extent = {{-11, -11}, {11, 11}}), Rectangle(origin = {2, 2}, fillColor = {255, 255, 255}, fillPattern = FillPattern.CrossDiag, extent = {{-26, 2}, {26, -2}}), Line(origin = {1.07, -15.9418}, points = {{0, -41}, {0, 41}}, thickness = 3), Ellipse(origin = {1, -58}, fillPattern = FillPattern.Solid, extent = {{-3, 3}, {3, -3}}), Ellipse(origin = {1, 26}, fillColor = {0, 77, 0}, fillPattern = FillPattern.Solid, extent = {{-5, 5}, {5, -5}})}));
  end Bridge_Crane;

  model Pos_Sensor
    DSFLib.Mechanical.Planar.Interfaces.Frame frame annotation(
      Placement(transformation(extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-72, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    DSFLib.ControlSystems.Blocks.Interfaces.RealOutput X annotation(
      Placement(transformation(origin = {82, 46}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {82, 46}, extent = {{-10, -10}, {10, 10}})));
    DSFLib.ControlSystems.Blocks.Interfaces.RealOutput Y annotation(
      Placement(transformation(origin = {82, -32}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {82, -32}, extent = {{-10, -10}, {10, 10}})));
  equation
    X = frame.r[1];
    Y = frame.r[2];
    frame.f = {0, 0};
    frame.tau = 0;
    annotation(
      Icon(graphics = {Text(textColor = {64, 64, 64}, extent = {{-150, 80}, {150, 120}}, textString = "%name"), Ellipse(fillColor = {245, 245, 245}, fillPattern = FillPattern.Solid, extent = {{-70, -70}, {70, 70}}), Line(points = {{22.9, 32.8}, {40.2, 57.3}}), Line(points = {{-37.6, 13.7}, {-65.8, 23.9}}), Polygon(rotation = -17.5, fillColor = {64, 64, 64}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, points = {{-5, 0}, {-2, 60}, {0, 65}, {2, 60}, {5, 0}, {-5, 0}}), Line(points = {{-22.9, 32.8}, {-40.2, 57.3}}), Ellipse(lineColor = {64, 64, 64}, fillColor = {255, 255, 255}, extent = {{-12, -12}, {12, 12}}), Line(points = {{37.6, 13.7}, {65.8, 23.9}}), Line(points = {{0, 70}, {0, 40}}), Ellipse(fillColor = {64, 64, 64}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, extent = {{-7, -7}, {7, 7}}), Text(origin = {-90, 66}, extent = {{20, -116}, {160, -86}}, textString = "L")}));
  end Pos_Sensor;

  model pointMassFric
    DSFLib.Mechanical.Planar.Interfaces.Frame frame annotation(
      Placement(visible = true, transformation(origin = {-100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {2.44249e-15, 2.44249e-15}, extent = {{-24, -24}, {24, 24}}, rotation = 0)));
    DSFLib.Mechanical.Planar.Units.Position r;
    parameter Real m(unit = "Kg") = 1 "Mass of the body";
    parameter Real[2] g(each unit = "m/s2") = {0, -9.81} "Gravity acceleration";
    parameter Real b(unit = "Ns/m") = 0;
    Real[2] v;
  equation
    r = frame.r;
    v = der(r);
    m*der(v) = frame.f + m*g - b*v;
    frame.tau = 0;
    annotation(
      Icon(graphics = {Ellipse(fillColor = {85, 170, 255}, fillPattern = FillPattern.Sphere, extent = {{-60, 60}, {60, -60}}), Text(extent = {{150, -96}, {-150, -66}}, textString = "m=%m"), Text(textColor = {0, 0, 255}, extent = {{-150, 100}, {150, 60}}, textString = "%name")}, coordinateSystem(extent = {{-100, -100}, {100, 100}})));
  end pointMassFric;

  model PlanarForce
    DSFLib.Mechanical.Planar.Interfaces.Frame frame annotation(
      Placement(transformation(origin = {-98, -2}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-100, -1.55431e-15}, extent = {{-18, -18}, {18, 18}})));
    parameter Real Fx(unit = "N") = 0;
    parameter Real Fy(unit = "N") = 0;
    
  equation
    frame.f[1] = -Fx;
    frame.f[2] = -Fy;
    frame.tau = 0;
    annotation(
      Diagram,
      Icon(graphics = {Text(origin = {4, -58}, extent = {{-98, 16}, {98, -16}}, textString = "F=%F"), Text(origin = {-2, -6}, textColor = {0, 0, 255}, extent = {{-150, 90}, {150, 50}}, textString = "%name"), Polygon(origin = {36, 0}, lineColor = {0, 127, 0}, fillColor = {160, 215, 160}, fillPattern = FillPattern.Solid, points = {{-100, 10}, {14, 10}, {14, 27}, {60, 0}, {14, -27}, {14, -10}, {-100, -10}, {-100, 10}}), Line(origin = {-77, 0}, points = {{17, 0}, {-17, 0}, {-17, 0}})}, coordinateSystem(extent = {{-100, -100}, {100, 100}})));
  end PlanarForce;
end Components;

package Problemas
  model Problema_1_3
    DSFLib.Circuits.Components.ConstVolt Va(V = 460) annotation(
      Placement(transformation(origin = {6, 34}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Components.Motor_Exc_Indep motor_Exc_Indep annotation(
      Placement(transformation(origin = {6, 2}, extent = {{-10, -10}, {10, 10}})));
  equation
    connect(Va.p, motor_Exc_Indep.p) annotation(
      Line(points = {{16, 34}, {20, 34}, {20, 12}, {13, 12}}));
    connect(Va.n, motor_Exc_Indep.n) annotation(
      Line(points = {{-4, 34}, {-8, 34}, {-8, 12}, {1, 12}}));
  end Problema_1_3;
  
    model Problema_2_1
    Components.Motor_Exc_Indep motor_Exc_Indep annotation(
      Placement(transformation(origin = {-2, -14}, extent = {{-10, -10}, {10, 10}})));
    Components.Ramp ramp(Vf = 460, t0 = 10, tf = 15) annotation(
      Placement(transformation(origin = {26, 20}, extent = {{-10, -10}, {10, 10}})));
  equation
    connect(ramp.n, motor_Exc_Indep.n) annotation(
      Line(points = {{36, 20}, {36, 30}, {-16, 30}, {-16, -4}, {-8, -4}}));
    connect(ramp.p, motor_Exc_Indep.p) annotation(
      Line(points = {{16, 20}, {4, 20}, {4, -4}}));
  end Problema_2_1;

  model Problema_2_2
    Components.Motor_Exc_Indep motor_Exc_Indep annotation(
      Placement(transformation(origin = {-2, -14}, extent = {{-10, -10}, {10, 10}})));
    Components.Ramp ramp(Vf = 460, t0 = 10, tf = 15) annotation(
      Placement(transformation(origin = {26, 20}, extent = {{-10, -10}, {10, 10}})));
    DSFLib.Mechanical.Rotational.Components.Damper damper(b = 30) annotation(
      Placement(transformation(origin = {38, -14}, extent = {{-10, -10}, {10, 10}})));
    DSFLib.Mechanical.Rotational.Components.Fixed fixed annotation(
      Placement(transformation(origin = {62, -24}, extent = {{-10, -10}, {10, 10}})));
  equation
    connect(ramp.n, motor_Exc_Indep.n) annotation(
      Line(points = {{36, 20}, {36, 30}, {-16, 30}, {-16, -4}, {-8, -4}}));
    connect(ramp.p, motor_Exc_Indep.p) annotation(
      Line(points = {{16, 20}, {4, 20}, {4, -4}}));
    connect(damper.flange_b, fixed.flange) annotation(
      Line(points = {{48, -14}, {62, -14}, {62, -24}}));
    connect(motor_Exc_Indep.flange, damper.flange_a) annotation(
      Line(points = {{8, -14}, {28, -14}}));
  end Problema_2_2;

  model Problema_3
    DSFLib.Mechanical.Translational.Components.ConstForce constForce(F = 10e5) annotation(
      Placement(transformation(origin = {-22, 18}, extent = {{-10, -10}, {10, 10}})));
    Components.Bridge_Crane bridge_Crane annotation(
      Placement(transformation(origin = {10, -10}, extent = {{-30, -30}, {30, 30}})));
  equation
    connect(constForce.flange, bridge_Crane.flange) annotation(
      Line(points = {{-32, 18}, {-32, 0}, {-8, 0}}));
  end Problema_3;

  model Problema_4
    DSFLib.Mechanical.RotoTranslational.Components.RackPinion rackPinion(r = 0.004) annotation(
      Placement(transformation(origin = {-8, 8}, extent = {{10, -10}, {-10, 10}}, rotation = -0)));
    Components.Motor_Exc_Indep motor_Exc_Indep annotation(
      Placement(transformation(origin = {-46, 6}, extent = {{-10, -10}, {10, 10}})));
    DSFLib.Circuits.Components.ConstVolt Va(V = 460) annotation(
      Placement(transformation(origin = {-46, 38}, extent = {{10, -10}, {-10, 10}}, rotation = -0)));
    Components.Bridge_Crane bridge_Crane annotation(
      Placement(transformation(origin = {38, -8}, extent = {{-42, -42}, {42, 42}})));
  equation
    connect(motor_Exc_Indep.flange, rackPinion.flangeR) annotation(
      Line(points = {{-36, 6}, {-26, 6}, {-26, 8}, {-6, 8}}));
    connect(Va.p, motor_Exc_Indep.p) annotation(
      Line(points = {{-36, 38}, {-32, 38}, {-32, 16}, {-40, 16}}));
    connect(Va.n, motor_Exc_Indep.n) annotation(
      Line(points = {{-56, 38}, {-60, 38}, {-60, 16}, {-52, 16}}));
    connect(rackPinion.flangeT, bridge_Crane.flange) annotation(
      Line(points = {{2, 2}, {28, 2}, {28, 3}}));
  end Problema_4;
  
  model Problema_5_1
Components.Bridge_Crane bridge_Crane annotation(
  Placement(transformation(origin = {32, -8}, extent = {{-30, -30}, {30, 30}})));
DSFLib.Mechanical.RotoTranslational.Components.RackPinion rackPinion(r = 0.004) annotation(
  Placement(transformation(origin = {-8, 6}, extent = {{10, -10}, {-10, 10}})));
DSFE_TP3.Components.Motor_Exc_Indep motor_Exc_Indep annotation(
  Placement(transformation(origin = {-62, 8}, extent = {{-10, -10}, {10, 10}})));
DSFE_TP3.Components.Ramp ramp(t0 = 76, tf = 81, Vf = -460) annotation(
  Placement(transformation(origin = {-76, 30}, extent = {{10, -10}, {-10, 10}}, rotation = -0)));
DSFE_TP3.Components.Ramp ramp1(Vf = 460, t0 = 10, tf = 15) annotation(
  Placement(transformation(origin = {-48, 30}, extent = {{10, -10}, {-10, 10}}, rotation = -0)));
    equation
      connect(motor_Exc_Indep.flange, rackPinion.flangeR) annotation(
        Line(points = {{-52, 7}, {-52, 6}, {-6, 6}}));
      connect(rackPinion.flangeT, bridge_Crane.flange) annotation(
        Line(points = {{2, -1}, {2, 0}, {25, 0}}));
      connect(motor_Exc_Indep.n, ramp.n) annotation(
        Line(points = {{-67, 18}, {-83, 18}, {-83, 30}, {-86, 30}}));
      connect(ramp.p, ramp1.n) annotation(
        Line(points = {{-66, 30}, {-58, 30}}));
      connect(motor_Exc_Indep.p, ramp1.p) annotation(
        Line(points = {{-55, 18}, {-35, 18}, {-35, 30}, {-38, 30}}));
    end Problema_5_1;
  
  
  model Problema_5_2
  Components.Bridge_Crane bridge_Crane annotation(
    Placement(transformation(origin = {32, -8}, extent = {{-30, -30}, {30, 30}})));
  DSFLib.Mechanical.RotoTranslational.Components.RackPinion rackPinion(r = 0.004) annotation(
    Placement(transformation(origin = {-8, 6}, extent = {{10, -10}, {-10, 10}})));
  DSFE_TP3.Components.Motor_Exc_Indep motor_Exc_Indep annotation(
    Placement(transformation(origin = {-62, 8}, extent = {{-10, -10}, {10, 10}})));
  DSFE_TP3.Components.Ramp ramp(t0 = 76, tf = 81, Vf = -460) annotation(
    Placement(transformation(origin = {-76, 30}, extent = {{10, -10}, {-10, 10}}, rotation = -0)));
  DSFE_TP3.Components.Ramp ramp1(Vf = 460, t0 = 10, tf = 15) annotation(
    Placement(transformation(origin = {-48, 30}, extent = {{10, -10}, {-10, 10}}, rotation = -0)));
Components.PlanarForce Aire(Fx = -3000, Fy = 0)  annotation(
    Placement(transformation(origin = {60, -30}, extent = {{-10, -10}, {10, 10}})));
equation
  connect(motor_Exc_Indep.flange, rackPinion.flangeR) annotation(
    Line(points = {{-52, 7}, {-52, 6}, {-6, 6}}));
  connect(rackPinion.flangeT, bridge_Crane.flange) annotation(
    Line(points = {{2, -1}, {2, 0}, {25, 0}}));
  connect(motor_Exc_Indep.n, ramp.n) annotation(
    Line(points = {{-67, 18}, {-83, 18}, {-83, 30}, {-86, 30}}));
  connect(ramp.p, ramp1.n) annotation(
    Line(points = {{-66, 30}, {-58, 30}}));
  connect(motor_Exc_Indep.p, ramp1.p) annotation(
    Line(points = {{-55, 18}, {-35, 18}, {-35, 30}, {-38, 30}}));
connect(Aire.frame, bridge_Crane.frame) annotation(
    Line(points = {{50, -30}, {32, -30}}));
end Problema_5_2;

model Problema_6
  Components.Bridge_Crane bridge_Crane annotation(
    Placement(transformation(origin = {22, -34}, extent = {{-30, -30}, {30, 30}})));
  DSFLib.Mechanical.RotoTranslational.Components.RackPinion rackPinion(r = 0.004) annotation(
    Placement(transformation(origin = {-15, -15}, extent = {{15, -15}, {-15, 15}})));
  Components.Motor_Exc_Indep motor_Exc_Indep annotation(
    Placement(transformation(origin = {-60, -14}, extent = {{-10, -10}, {10, 10}})));
  Components.Pos_Sensor pos_Sensor annotation(
    Placement(transformation(origin = {60, -56}, extent = {{-10, -10}, {10, 10}})));
  DSFLib.ControlSystems.Actuators.Circuits.ModulatedVoltageSource Source annotation(
        Placement(transformation(origin = {-59, 17}, extent = {{13, 13}, {-13, -13}})));
  DSFLib.ControlSystems.Blocks.Components.StepSource Xref(U = 15)  annotation(
        Placement(transformation(origin = {58, 64}, extent = {{10, -10}, {-10, 10}})));
  DSFLib.ControlSystems.Blocks.Components.Add add(k1 = 1, k2 = -1)  annotation(
    Placement(transformation(origin = {-6, 50}, extent = {{10, -10}, {-10, 10}})));
DSFLib.ControlSystems.Blocks.Components.Gain Kp(K = 30) annotation(
    Placement(transformation(origin = {-42, 50}, extent = {{-10, -10}, {10, 10}}, rotation = -180)));

equation
  connect(rackPinion.flangeT, bridge_Crane.flange) annotation(
    Line(points = {{0, -25.5}, {-0.5, -25.5}, {-0.5, -26}, {15, -26}}));
  connect(motor_Exc_Indep.flange, rackPinion.flangeR) annotation(
    Line(points = {{-49.6, -15}, {-12, -15}}));
  connect(bridge_Crane.frame, pos_Sensor.frame) annotation(
    Line(points = {{22, -56}, {53, -56}}));
  connect(motor_Exc_Indep.p, Source.p) annotation(
    Line(points = {{-53.2, -3.8}, {-46.2, -3.8}, {-46.2, 17.2}}));
  connect(motor_Exc_Indep.n, Source.n) annotation(
    Line(points = {{-65.2, -3.8}, {-71.2, -3.8}, {-71.2, 17.2}}));
  connect(Xref.y, add.u1) annotation(
    Line(points = {{47, 64}, {31.5, 64}, {31.5, 56}, {5, 56}}, color = {0, 0, 127}));
  connect(Xref.y, add.u1) annotation(
    Line(points = {{70, 76}, {17, 76}}, color = {0, 0, 127}));
  connect(add.u2, pos_Sensor.X) annotation(
    Line(points = {{5, 44}, {5, 45}, {68, 45}, {68, -51}}, color = {0, 0, 127}));
connect(add.y, Kp.u) annotation(
    Line(points = {{-16, 50}, {-30, 50}}, color = {0, 0, 127}));
connect(Kp.y, Source.u) annotation(
    Line(points = {{-52, 50}, {-58, 50}, {-58, 26}}, color = {0, 0, 127}));
end Problema_6;

model Problema_7
Components.Bridge_Crane bridge_Crane annotation(
      Placement(transformation(origin = {28, -18}, extent = {{-30, -30}, {30, 30}})));
    DSFLib.Mechanical.RotoTranslational.Components.RackPinion rackPinion(r = 0.004) annotation(
      Placement(transformation(origin = {-15, -7}, extent = {{15, -15}, {-15, 15}})));
    Components.Motor_Exc_Indep motor_Exc_Indep annotation(
      Placement(transformation(origin = {-60, -14}, extent = {{-10, -10}, {10, 10}})));
    Components.Pos_Sensor pos_Sensor annotation(
      Placement(transformation(origin = {60, -40}, extent = {{-10, -10}, {10, 10}})));
    DSFLib.ControlSystems.Actuators.Circuits.ModulatedVoltageSource Source annotation(
      Placement(transformation(origin = {-59, 17}, extent = {{13, 13}, {-13, -13}})));
    DSFLib.ControlSystems.Blocks.Components.Add add(k1 = 1, k2 = -1) annotation(
      Placement(transformation(origin = {24, 50}, extent = {{10, -10}, {-10, 10}})));
DSFLib.ControlSystems.Blocks.Components.TransferFunction FT(num = {-30, 30}, den = {1, 1})  annotation(
    Placement(transformation(origin = {-30, 50}, extent = {{10, -10}, {-10, 10}}, rotation = -0)));
Components.PlanarForce AirForce(Fx = 3000, Fy = 0)  annotation(
    Placement(transformation(origin = {42, -68}, extent = {{-10, -10}, {10, 10}})));
  DSFLib.ControlSystems.Blocks.Components.StepSource Xref(U = 15) annotation(
        Placement(transformation(origin = {72, 76}, extent = {{10, -10}, {-10, 10}})));
  equation
      connect(rackPinion.flangeT, bridge_Crane.flange) annotation(
        Line(points = {{0, -17.5}, {-0.5, -17.5}, {-0.5, -10}, {21, -10}}));
      connect(motor_Exc_Indep.flange, rackPinion.flangeR) annotation(
        Line(points = {{-49.6, -15}, {-37.6, -15}, {-37.6, -7}, {-11.6, -7}}));
      connect(bridge_Crane.frame, pos_Sensor.frame) annotation(
        Line(points = {{28, -39.6}, {53, -39.6}}));
      connect(motor_Exc_Indep.p, Source.p) annotation(
        Line(points = {{-53.2, -3.8}, {-46.2, -3.8}, {-46.2, 17.2}}));
      connect(motor_Exc_Indep.n, Source.n) annotation(
        Line(points = {{-65.2, -3.8}, {-71.2, -3.8}, {-71.2, 17.2}}));
      connect(add.u2, pos_Sensor.X) annotation(
        Line(points = {{35, 44}, {35, 45}, {68, 45}, {68, -35}}, color = {0, 0, 127}));
      connect(FT.y, Source.u) annotation(
        Line(points = {{-40, 50}, {-58, 50}, {-58, 26}}, color = {0, 0, 127}));
      connect(add.y, FT.u) annotation(
        Line(points = {{14, 50}, {-18, 50}}, color = {0, 0, 127}));
      connect(AirForce.frame, bridge_Crane.frame) annotation(
        Line(points = {{32, -68}, {28, -68}, {28, -40}}));
  connect(Xref.y, add.u1) annotation(
        Line(points = {{62, 76}, {36, 76}, {36, 56}}, color = {0, 0, 127}));
      annotation(
    Diagram);
    
    end Problema_7;

  
end Problemas;


end DSFE_TP3;
